<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="1098" height="800" 
				backgroundImage=""
				creationComplete="init()"
				initialize="i_init()"
				showCloseButton="false"
        	
				headerHeight="20"
        		borderAlpha="1.0"
        		borderColor="#cccccc"
        		xmlns:local="*" 
	 >
	
	<mx:states>
		<mx:State name="SaveRendition">
			<mx:AddChild relativeTo="{dataGrid2}" position="before">
				<mx:HBox width="100%" id="hbox2">
					<mx:Label text="Rendition Code" width="191" id="label1" fontWeight="bold" fontSize="14"/>
					<mx:TextInput  backgroundColor="#85E7FF"  width="232" id="inputcode" text=""  maxChars="13" fontSize="14" fontWeight="bold" keyUp="{validateBase(event)}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{dataGrid2}" position="before">
				<mx:HBox width="100%" height="60" id="hbox3">  
					<mx:Label text="Rendition Description" width="191" id="label2" fontWeight="bold" fontSize="14"/>
					<mx:TextArea   backgroundColor="#85E7FF"  width="324" height="55" id="inputdescription" text="" fontSize="14" fontWeight="bold"/> 
					</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{dataGrid2}" position="before">
				<mx:HBox width="100%" id="hbox1">
					<mx:RadioButtonGroup id="radiogroup4"/>
					<mx:Label text="Share Rendition?" width="189" fontWeight="bold" fontSize="14"/>
					<mx:RadioButton id="gen" label="Yes" groupName="radiogroup4" width="149" />
					<mx:RadioButton id="uoc" label="No" groupName="radiogroup4" width="228" />
				</mx:HBox>
			</mx:AddChild>	
			<mx:AddChild relativeTo="{dataGrid2}" position="before">
				<mx:HBox width="100%" id="hbox4">
					<mx:RadioButtonGroup id="radiogroup5"/>
					<mx:Label text="Save as Default?" width="189" fontWeight="bold" fontSize="14"/>
					<mx:RadioButton id="default_yes" label="Yes" groupName="radiogroup5" width="149" />
					<mx:RadioButton id="default_no" label="No" groupName="radiogroup5" width="228" />
				</mx:HBox>
			</mx:AddChild>	
			<mx:AddChild relativeTo="{dataGrid2}" position="before">
				<mx:HBox width="100%">
					<mx:Spacer width="100%"/>
					<local:HighViewButton doc_id="1046" label="Submit" id="btn_save_current" click="{saveRendition(event)}"  />
					<local:HighViewButton label="Cancel" doc_id="1047" id="btn_cancel" click="{currentState	= ''}"/>
				</mx:HBox>
			</mx:AddChild>	
			<mx:SetProperty target="{btn_dg2_implement}" name="label" value="Apply"/>
		</mx:State>
		
		
	</mx:states>

	<mx:HTTPService 
		id="retrieverendition" 
		url="ae_tlch_xmlreq.php" 
		useProxy="false" 
		result="ListHandler(event)" 
		method="POST" 
		fault="faultListHandler(event)"
		contentType="application/xml"  
		>
		<mx:request> 
			<ezware_request>
				<action>refreshData</action>
				<company>{r_company_code}</company>
				<sid>{r_sessid}</sid>
				<parameters>{reqParms}</parameters>
				<systemAndJob></systemAndJob>
				<version>1</version>
			</ezware_request>
		</mx:request>
	</mx:HTTPService>
	<mx:HTTPService 
		id="retrievemodifyrendition" 
		url="ae_tlch_xmlreq.php" 
		useProxy="false" 
		result="ModifyListHandler(event)" 
		method="POST" 
		fault="ModifyfaultListHandler(event)"
		contentType="application/xml"  
		>
		<mx:request> 
			<ezware_request>
				<action>refreshData</action>
				<company>{r_company_code}</company>
				<sid>{r_sessid}</sid>
				<parameters>{reqParms}</parameters>
				<systemAndJob></systemAndJob>
				<version>1</version>
			</ezware_request>
		</mx:request>
	</mx:HTTPService>
	<mx:HTTPService 
		id="saverenditionbycreate" 
		url="ae_tlch_xmlreq.php" 
		useProxy="false" 
		method="POST" 
		result="CreateResultHandlerRendition(event)"
		fault="CreatefaultListHandler(event)"
		contentType="application/xml"  
		>
		<mx:request> 
			<ezware_request>
				<action>refreshData</action>
				<company>{r_company_code}</company>
				<sid>{r_sessid}</sid>
				<parameters>{finalRenditionXML}</parameters>
				<systemAndJob></systemAndJob>
				<version>1</version>
			</ezware_request>
		</mx:request>
	</mx:HTTPService>
	<mx:HTTPService 
		id="saverenditionbycreateimplement" 
		url="ae_tlch_xmlreq.php" 
		useProxy="false" 
		method="POST" 
		result="CreateResultHandlerRenditionImplement(event)"
		fault="CreatefaultListHandler(event)"
		contentType="application/xml"  
		>
		<mx:request> 
			<ezware_request>
				<action>refreshData</action>
				<company>{r_company_code}</company>
				<sid>{r_sessid}</sid>
				<parameters>{finalRenditionXML}</parameters>
				<systemAndJob></systemAndJob>
				<version>1</version>
			</ezware_request>
		</mx:request>
	</mx:HTTPService>
	<mx:Script source="AlertMessageHandler.as"/>
	
	<mx:HTTPService 
		id="saverenditionbycreateimplementupdatequery" 
		url="ae_tlch_xmlreq.php" 
		useProxy="false" 
		method="POST" 
		result="CreateResultQueryHandlerRenditionImplement(event)"
		fault="CreateQueryfaultListHandler(event)"
		contentType="application/xml"  
		>
		<mx:request> 
			<ezware_request>
				<action>refreshData</action>
				<company>{r_company_code}</company>
				<sid>{r_sessid}</sid>
				<parameters>{queryparameters}</parameters>  
				<systemAndJob></systemAndJob>
				<version>1</version>
			</ezware_request>
		</mx:request>
	</mx:HTTPService>
	
	
	
	
	
	<!-- mx:Script source="AlertMessageHandler.as"/ -->
	
	<mx:Script>
	<![CDATA[
		import com.utilities.Utils;
		
		import mx.collections.ArrayCollection;
		import mx.controls.*;
		import mx.controls.Alert;
		import mx.core.Application;
		import mx.events.CloseEvent;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
		import mx.managers.PopUpManager;
		import mx.rpc.events.*;
		import mx.utils.ArrayUtil;
		import mx.utils.ObjectProxy;

		 	[Bindable]
				public var r_sessid:String = new String;
			[Bindable]
				public var r_company_code:String = new String;
			[Bindable]
				public var r_user_code:String = new String;
			[Bindable]
				public var r_passed_mainboard:String = new String;
			[Bindable]
				public var r_passed_mainboardtitle:String = new String;
			[Bindable]
				public var r_passed_maintitle:String = new String; 
			[Bindable]
				public var r_passed_eventtitle:String = new String;
			[Bindable]
			public var history_query:String = new String;
		[Bindable]
		public var col_xlcHistory:String = new String;
		
			[Bindable]
				public var r_file_passed:String = new String;	
			[Bindable]
				public var r_file_modify:String = new String;	
			[Bindable]
				public var r_description_modify:String = new String;	
			[Bindable]
				public var r_default_modify:String = new String;	
			[Bindable]
				private var reqParms:String = new String;
			[Bindable]
				private var RenditiontdObjectCollection:ArrayCollection = new ArrayCollection;
			[Bindable]	
				public var UserRenditiontdObjectCollection:ArrayCollection = new ArrayCollection;
		
			[Bindable]	
			public var ArrayColumnList:ArrayCollection = new ArrayCollection;
		
			[Bindable]
				public var finalRenditionXML:String = new String;
			[Bindable]
				private var default_flag:String = new String;
			[Bindable]
				public var r_flag_type:String = new String; 
			[Bindable]
				public var r_lock_columns:int = new int;
				public var c_utils:Utils = new Utils();
				public var rr_return = new String();
				private var TempRenditiontdObjectCollection:ArrayCollection = new ArrayCollection;
		[Bindable]		
		private var queryparameters:String = new String;
		private function i_init():void{
			if ((flash.system.Capabilities.screenResolutionX < 1680) && (flash.system.Capabilities.screenResolutionY < 1050)){
      				this.width = 1200;
      				this.height = 575;
      			}
      		
		}
		private function validateBase(event:KeyboardEvent):void{
			
			//if ((inputcode.text).toUpperCase() == 'BASE'){
				
			if(((inputcode.text).toUpperCase()).substr(0,4) == 'BASE'){	
				
				
				hbox1.enabled = false;
				uoc.selected = false;
				gen.selected = true;
			} else {
				hbox1.enabled = true;
				uoc.selected = true;
				gen.selected = false;
			}
		}
		private function init():void{
			//dataGrid2.addEventListener( DragEvent.DRAG_OVER, handlerDragOver);
			temp_array_remove = new ArrayCollection;
			httpRequestUrlReditionCM(parentApplication.application_entry);
			reqParms = "REFRESH,RENDITION," + r_passed_mainboard + "," + r_user_code + "," + r_file_passed;
      		retrieverendition.send();
			
			
			
		}
		public function handlerDragOver(event:DragEvent):void{
			var dropIndex:int        = dataGrid2.calculateDropIndex(event);
			var rowsDisplayed:Number = dataGrid2.rowCount;
			var topvisibleIndex:int  = dataGrid2.verticalScrollPosition;
			var botvisibleIndex:int  = topvisibleIndex + rowsDisplayed;
			
			
			if ( dropIndex <= topvisibleIndex) {
				
				dataGrid2.verticalScrollPosition = Math.max( dataGrid2.verticalScrollPosition- 1, 0 );
				
			} else if( dropIndex >= botvisibleIndex - 1 ){
				
				dataGrid2.verticalScrollPosition += 1;
			}
		}	
			
		private function titleWindow_close(evt:Event):void {
			
		
			//for (var x:uint=0;x<temp_array_remove.length;x++){
				
				/*
				for (var x:uint=temp_array_remove.length -1;x>=0;x--){	
				
				var TransObj:Object = new Object;
				TransObj.id = temp_array_remove[x]["idx"];
				TransObj.type = temp_array_remove[x]["type"]; 
				TransObj.columnname = temp_array_remove[x]["columnname"];
				TransObj.headertext = temp_array_remove[x]["headertext"];
				TransObj.bgcolor = temp_array_remove[x]["bgcolor"];
				Alert.show(temp_array_remove[x]["idx"]);
				var loc_int:int = temp_array_remove[x]["idx"]
				//UserRenditiontdObjectCollection.addItemAt(TransObj,TransObj.id);
				UserRenditiontdObjectCollection.addItemAt(TransObj,loc_int);
				
				  
				
				
			}  
			 
			*/
 		        PopUpManager.removePopUp(this);
        }
       private function ListHandler(evt:ResultEvent):void{
       	
			
			if (evt.result.ezware_response.status == 'OK' ) {
				
				RenditiontdObjectCollection=new ArrayCollection()
				var suf:String = "data";
				var mainBoard:String = "RENDITION";
				if (evt.result.ezware_response.refresh_data[mainBoard][suf] == null)
            	{
                	RenditiontdObjectCollection=new ArrayCollection()
            	}
            	else if (evt.result.ezware_response.refresh_data[mainBoard][suf] is ArrayCollection)
            	{
              		RenditiontdObjectCollection=evt.result.ezware_response.refresh_data[mainBoard][suf];
            	}
            	else if (evt.result.ezware_response.refresh_data[mainBoard][suf] is ObjectProxy)
            	{
               		RenditiontdObjectCollection = new ArrayCollection(ArrayUtil.toArray(evt.result.ezware_response.refresh_data[mainBoard][suf])); 
            	}
					RenditiontdObjectCollection.refresh();
					 
					
					//UserRenditiontdObjectCollection = new ArrayCollection();
					/*
					if (r_flag_type == 'Create'){
						// Work on the lock columns	
						for (var i:int=0;i<r_lock_columns;i++){
							var obj:Object = new Object;
							obj.type = RenditiontdObjectCollection[i].type;
							obj.columnname = RenditiontdObjectCollection[i].columnname;
							obj.headertext = RenditiontdObjectCollection[i].headertext;
							obj.bgcolor = RenditiontdObjectCollection[i].bgcolor;
							UserRenditiontdObjectCollection.addItem(obj);
						} 
					}      
					if (r_flag_type == 'Modify'){
						reqParms = "REFRESH,RENDITION," + r_passed_mainboard + "," + r_user_code + "," + r_file_modify;
						retrievemodifyrendition.send();
					}
					*/    
					
					//  Now time to remove the locked columns on the left datagrid.
					var arr_remove:Array = new Array();
					for (var x:uint=0;x<RenditiontdObjectCollection.length;x++){
						if(x < r_lock_columns){ 
							arr_remove.push(x);
						}			
						
					}
					arr_remove.sort(Array.NUMERIC | Array.DESCENDING);
					for (var b:uint=0;b<arr_remove.length;b++){
						RenditiontdObjectCollection.removeItemAt(arr_remove[b]);
					}  
					
					
					
			} else	{
				
				var s_ret:String = resultStatusRenditionCM(evt.result.ezware_response.status, evt.result.ezware_response.reason);  
				AlertMessageShow(s_ret);
				return;
			}			
					
				
					
					
 		}
		
		private function ModifyListHandler(evt:ResultEvent):void{
			
			
			
			if (evt.result.ezware_response.status == "OK"){
			
		
			
			
					UserRenditiontdObjectCollection=new ArrayCollection()
					var suf:String = "data";
					var mainBoard:String = "RENDITION";
					if (evt.result.ezware_response.refresh_data[mainBoard][suf] == null)
					{
						UserRenditiontdObjectCollection=new ArrayCollection()
					}
					else if (evt.result.ezware_response.refresh_data[mainBoard][suf] is ArrayCollection)
					{
						UserRenditiontdObjectCollection=evt.result.ezware_response.refresh_data[mainBoard][suf];
					}
					else if (evt.result.ezware_response.refresh_data[mainBoard][suf] is ObjectProxy)
					{
						UserRenditiontdObjectCollection = new ArrayCollection(ArrayUtil.toArray(evt.result.ezware_response.refresh_data[mainBoard][suf])); 
					}
					UserRenditiontdObjectCollection.refresh();
					
					
					
			} else	{
				
				var s_ret:String = resultStatusRenditionCM(evt.result.ezware_response.status, evt.result.ezware_response.reason);  
				AlertMessageShow(s_ret);
				return;
			}	
			
			
			
		}
		
		private var popcmrendition:RenditionCM
		private function CreateResultHandlerRendition(evt:ResultEvent):void{
			if (evt.result.ezware_response.status == 'OK'){
				PopUpManager.removePopUp(popsaverendition);
				PopUpManager.removePopUp(this);
				_callbackFunction(null); 
				
			} else	{
				var s_ret:String = resultStatusRenditionCM(evt.result.ezware_response.status, evt.result.ezware_response.reason);  
				AlertMessageShow(s_ret);
				return;
			}	
		}
		
		
		private function CreateResultHandlerRenditionImplement(evt:ResultEvent):void{
			/*
			if (evt.result.ezware_response.status == 'OK'){
				PopUpManager.removePopUp(popsaverendition);
				PopUpManager.removePopUp(this);
				_callbackFunctionImplement(null); 
			} else	{
				var s_ret:String = resultStatusRenditionCM(evt.result.ezware_response.status, evt.result.ezware_response.reason);  
				AlertMessageShow(s_ret);
				return;
			}	
			*/
			 
			if (evt.result.ezware_response.status == 'OK'){
				
				if (col_xlcHistory == "Yes"){      
				queryparameters = "REFRESH,UPD_MV_QUERY," + r_user_code + "," + r_passed_mainboard + ","+ "No Selection" + "," +  "No Selection" + "," +  history_query;
				saverenditionbycreateimplementupdatequery.send();  
				} else {
					PopUpManager.removePopUp(popsaverendition);
					PopUpManager.removePopUp(this);
					
					if  (rr_return == "retain"){
						
						_callbackFunctionImplementRetain(null);
					} else if (rr_return == "refresh"){
						
					_callbackFunctionImplement(null);
					
					}
					
				}
			} else	{
				var s_ret:String = resultStatusRenditionCM(evt.result.ezware_response.status, evt.result.ezware_response.reason);  
				AlertMessageShow(s_ret);
				PopUpManager.removePopUp(popsaverendition);
				PopUpManager.removePopUp(this);
				return;
			}	
			
		}
		
		
		private function CreateResultQueryHandlerRenditionImplement(evt:ResultEvent):void{
			
			if (evt.result.ezware_response.status == 'OK'){
				PopUpManager.removePopUp(popsaverendition);
				PopUpManager.removePopUp(this);
				//_callbackFunctionImplement(null); 
				          
				if  (rr_return == "retain"){   
					
					_callbackFunctionImplementRetain(null);
				} else if (rr_return == "refresh"){
					
				
					
					_callbackFunctionImplement(null);
					
				}
				
				
			} else	{
			var s_ret:String = resultStatusRenditionCM(evt.result.ezware_response.status, evt.result.ezware_response.reason);  
			AlertMessageShow(s_ret);
			return;
			}	
			
			
			
		}
		
		
		private function CreatefaultListHandler(evt:FaultEvent):void
		{
			
			var faultMessage:String = "The origin of this fault is: " + evt.message;
			AlertMessageShow("Error in saving XML to Database");
		}
		private function CreateQueryfaultListHandler(evt:FaultEvent):void
		{
			
			var faultMessage:String = "The origin of this fault is: " + evt.message;
			AlertMessageShow("Error in saving QUERY XML to Database");
		}
		private function faultListHandler(evt:FaultEvent):void
		{
			
			var faultMessage:String = "The origin of this fault is: " + evt.message;
			AlertMessageShow("Error opening file for Retrieving Rendition");
		}
		private function ModifyfaultListHandler(evt:FaultEvent):void
		{
			
			var faultMessage:String = "The origin of this fault is: " + evt.message;
			AlertMessageShow("Error opening file for Modified Rendition");
		}
		 private function selectAlldg1(event:Event):void {
           			var arr:Array = new Array();
       					for (var a:uint=dataGrid1.dataProvider.length -1 ;a>0;a--){	
         					arr.push(a);
       					}
       					arr.push(0);
						arr = AscendingSortArray(arr);
						dataGrid1.selectedIndices = arr;
		 }
		 private function selectAlldg2(event:Event):void {
           				var arr:Array = new Array();
       					for (var a:uint=dataGrid2.dataProvider.length -1 ;a>0;a--){	
         				arr.push(a);
       					}
       					arr.push(0);
						arr = AscendingSortArray(arr);
       					dataGrid2.selectedIndices = arr;
         }
 	
        private function clearall(event:Event):void {
  	        		
			var arr:Array = new Array();
			for (var a:uint=dataGrid2.dataProvider.length - 1;a>0;a--){	
				arr.push(a);
			}
			arr.push(0);
			arr = AscendingSortArray(arr);
			dataGrid2.selectedIndices = arr;
			removeItem(event);
       }
         private function datagrid1Click(event:Event):void {
  	        	var arrclick:Array = new Array();
       					for(var a:uint=0;a<dataGrid1.selectedItems.length;a++){
       					arrclick.push(dataGrid1.selectedIndices[a]);
       					}
       					arrclick = AscendingSortArray(arrclick);
						dataGrid1.selectedIndices = arrclick;
       }
        private function datagrid2Click(event:DragEvent):void {
		    	var arrclick:Array = new Array();
       					for(var a:uint=0;a<dataGrid2.selectedItems.length;a++){
       					arrclick.push(dataGrid2.selectedIndices[a]);
       					}
						arrclick = SortArray(arrclick);
						for(var b:uint=0;b<arrclick.length;b++){
							if (arrclick[b] < r_lock_columns){
								AlertMessageShow('Moving of locked columns are not allowed');
								event.preventDefault();
								break;
							}
						}
						dataGrid2.selectedIndices = arrclick;
	   }
		private var temp_array_remove:ArrayCollection = new ArrayCollection;
		private var NewObj:Object = new Object;
       	private function removeItem(evt:Event):void {
              
			var arr_rem:Array = new Array();
               var idx:int = new int;
               for(var a:uint=0;a<dataGrid2.selectedItems.length;a++){
       					idx = dataGrid2.selectedIndices[a];
       						arr_rem.push(idx);
               } 
              arr_rem.sort(Array.NUMERIC | Array.DESCENDING);
			   //arr_rem.sort(Array.NUMERIC);
              //Alert.show(arr_rem.toString()); 
			  for (var b:uint=0;b<arr_rem.length;b++){
				 // Alert.show(arr_rem[b].toString()); 
				  
				  if(arr_rem[b] >= r_lock_columns){ 
               		   /*
					   NewObj = new Object;
					   NewObj.idx = UserRenditiontdObjectCollection[arr_rem[b]]["id"];
					   NewObj.type = UserRenditiontdObjectCollection[arr_rem[b]]["type"];
					   NewObj.columnname = UserRenditiontdObjectCollection[arr_rem[b]]["columnname"];
					   NewObj.headertext = UserRenditiontdObjectCollection[arr_rem[b]]["headertext"];
					   NewObj.bgcolor = UserRenditiontdObjectCollection[arr_rem[b]]["bgcolor"];
					   temp_array_remove.addItem(NewObj);
					   */
					  // UserRenditiontdObjectCollection.removeItemAt(arr_rem[b]); 
					   dataGrid2.dataProvider.removeItemAt(arr_rem[b]);
					   
					   
					  
				   }			
					 
				}   
			
        } 
        private var popaddpanel:PanelName;
        private function addPanelItem(evt:Event):void {
			
				var si:int = dataGrid2.selectedItems.length
				if (si > 1){
					AlertMessageShow("Select only 1 row.");
					return;
				}
				if (si < 1){
					AlertMessageShow("Select column name to insert panel.");
					return;
				}
				// In order to compensate the 0 array indexing.
				var sel_in:int = dataGrid2.selectedIndex + 1;
				if (sel_in <= r_lock_columns){
					AlertMessageShow("Adding of panels on Locked Columns are not allowed");
					return;
				} 
				if (si == 1){
					
					if (dataGrid2.selectedItem.type == "panel"){
						AlertMessageShow("Please select a 'column'.")
						return; 
					}
					if (dataGrid2.selectedItem.type == "column"){
						popaddpanel = PanelName(
                		PopUpManager.createPopUp(this, PanelName, true));
                		popaddpanel["btn_submit"].addEventListener("click", addnewPanel);
                		popaddpanel["ti_panelname"].addEventListener(KeyboardEvent.KEY_DOWN, addnewPanelkeyboard);
					}
					
				}
			
        }
        
		 private function addnewPanelkeyboard(event:KeyboardEvent):void {   
		 	if (event.keyCode == 13){
		 		popaddpanel.btn_submit.setFocus();
		 		popaddpanel.btn_submit.drawFocus(true);
		 		addnewPanel(event)
		 	}
		 }
         public function addnewPanel(event:Event):void {    

            
            if (popaddpanel.ti_panelname.text.length == 0){
            	AlertMessageShow("Panel Name should not be blank.");
            	return;
            }
            
            if (popaddpanel.ti_panelname.text.length > 0){
            	popaddpanel.ti_panelname.text = c_utils.trim(popaddpanel.ti_panelname.text);
            	var flag:Boolean = true;
            	for( var i:int = 0; i < UserRenditiontdObjectCollection.length; i++ )
					{
						if (((UserRenditiontdObjectCollection[i].headertext).toUpperCase() == (popaddpanel.ti_panelname.text).toUpperCase())&&(UserRenditiontdObjectCollection[i].type == "panel")){
							AlertMessageShow("Panel name '" + popaddpanel.ti_panelname.text + "' already exists in the current Rendition." ); 
							flag = false;
							break;
						}
					}
				if (flag == false){
					return;
				}
				if (flag == true){
					// Continue to add item to datagrid 2
					 var obj:Object = new Object();
                		 obj.type = 'panel';
                		 obj.columnname = '';
                		 obj.headertext = popaddpanel.ti_panelname.text;
						 obj.bgcolor = 'green';
                		 UserRenditiontdObjectCollection.addItemAt(obj, dataGrid2.selectedIndex); 
				}
            }
            	PopUpManager.removePopUp(popaddpanel);
                
         }

         private function dragDropHandler(event:DragEvent):void {    

             // This prevents inserting a row automatically.
           //                    event.preventDefault();
                
            } 
         private function AscendingSortArray(myArray:Array):Array
			{ 
				var tempValue:String; 
				var done:String = "no"; 
				var swap:String = "no"; 
				var i:int; 
				var fileTemp1:int; 
				var fileTemp2:int; 
				while (done == "no") { 
					for (i = 0; i < (myArray.length - 1); i++) {
					 
						fileTemp1 = myArray[i]; 
						fileTemp2 = myArray[i+1]; 
						if (fileTemp1 > fileTemp2) { 
							tempValue = myArray[i]; 
							myArray[i] = myArray[i+1]; 
							myArray[i+1] = tempValue; 
							swap = "yes"; 
						}
						 
						
			
					} 
					
					if (swap == "no") { 
						done = "yes"; 
					} 
						swap = "no"; 
				 
				  
				} 
				return myArray; 
			}          
         private function SortArray(myArray:Array):Array
			{ 
				var tempValue:String; 
				var done:String = "no"; 
				var swap:String = "no"; 
				var i:int; 
				var fileTemp1:int; 
				var fileTemp2:int; 
				while (done == "no") { 
					for (i = 0; i < (myArray.length - 1); i++) {
						fileTemp1 = myArray[i]; 
						fileTemp2 = myArray[i+1]; 
						if (fileTemp1 < fileTemp2) { 
							tempValue = myArray[i]; 
							myArray[i] = myArray[i+1]; 
							myArray[i+1] = tempValue; 
							swap = "yes"; 
						}
					} 
					if (swap == "no") { 
						done = "yes"; 
					} 
						swap = "no"; 
				} 
				return myArray; 
			} 
			  private function launchEZLearnMenu(event:Event):void{
  		 	if (parentApplication.mousehoverparslabel == "OFF")
  		 	{
  	           	parentApplication.mousehoverparslabel = "ON"
  	           	parentApplication.mousehoverpars = "YES";
  	           	/*
  	           	popezlearnmenu = EZLearnMenu(
                PopUpManager.createPopUp(this, EZLearnMenu, true));
                popezlearnmenu.mh_res = mousehoverpars;
                popezlearnmenu.ses_id = session_id;
                popezlearnmenu.e_z_learn_link = ezlearnlink;
         		//popezlearnmenu["hoverswitch"].addEventListener(MouseEvent.CLICK,  switchedHover);
         		popezlearnmenu["btn_ok"].addEventListener(MouseEvent.CLICK,  switchedHover); 
         		*/
      			 
      		}
      		else
       	{
  		 		parentApplication.mousehoverpars = "NO"; 
  		 		parentApplication.mousehoverparslabel = "OFF"
  	   		}
      		
         }
		private function validateSaveRendition(event:Event):void {
			currentState	= 'SaveRendition';
			
			
			if ( Application.application.parameters.ar == 'O'){
				gen.enabled = false;
			}
			inputcode.setFocus();
			uoc.selected = true;
			default_no.selected = true;
			
			if  (r_flag_type == 'Modify'){
				inputcode.enabled=false;
				inputcode.text = r_file_modify;
				inputdescription.text = r_description_modify;
				
				// Rendition as
				if (r_file_modify.substr(0,1) == '*'){
					uoc.selected = true;
					gen.selected = false;
				} else {
					uoc.selected = false;
					gen.selected = true;
				}
				// Default?
				if (r_default_modify == 'Y'){
					default_yes.selected = true;
					default_no.selected = false;
				}else {
					default_no.selected = true;
					default_yes.selected = false;
				}
				// Default to fault.
				gen.enabled = false;
				uoc.enabled = false;
				
				
			}
			/*
			if (UserRenditiontdObjectCollection.length == 0){
				AlertMessageShow("Please Create Columns for Rendition");
				return;
			}
			
			launchSaveRendition(event);
			*/
		}
		public var popsaverendition:SaveRendition;
		private function launchSaveRendition(event:Event):void {
			
			
			popsaverendition = SaveRendition(
				PopUpManager.createPopUp(this, SaveRendition, true));
			popsaverendition.sv_r_flag_type = r_flag_type;
			popsaverendition.sv_rendcode = r_file_modify;
			popsaverendition.sv_renddesc = r_description_modify;
			popsaverendition.sc_default = r_default_modify;
			popsaverendition["btn_save_current"].addEventListener("click", saveRendition); 
			popsaverendition["btn_save_current"].addEventListener( MouseEvent.ROLL_OVER,parentApplication.passMouseHoverfromComponents);
			popsaverendition["btn_save_current"].addEventListener( MouseEvent.ROLL_OUT,parentApplication.closepassMouseHoverfromComponents);
			
			
		}	
		
		private function saveRendition(event:Event):void {
			
			if ( Application.application.parameters.ar == 'O'){
				if (gen.selected == true){
					AlertMessageShow("You do not have permission to save a Generic Rendition");
					return;
				}
			}     
			
			if (inputcode.text == ""){
				AlertMessageShow("Please Enter Code.");
				inputcode.setFocus();
				inputcode.setStyle("backgroundColor", "#C7CECC");    
				inputdescription.setStyle("backgroundColor", "#ffffff");
				return;
				
			}
			
			
			if (r_user_code.toUpperCase() != 'MAVES'){
			
					if (  (inputcode.text.toUpperCase()).substr(0,4) == "BASE"){
						AlertMessageShow("'BASE' Code is not allowed");
						return;
					}
			}
			
			if (inputcode.text.toUpperCase() == "MASTER"){
				AlertMessageShow("'MASTER' Code is not allowed");
				return;
			}
				
			
			
			if (inputdescription.text == ""){
				AlertMessageShow("Please Enter Description.");
				inputdescription.setFocus();
				inputcode.setStyle("backgroundColor", "#ffffff"); 	
				inputdescription.setStyle("backgroundColor", "#C7CECC");
				return;
			}
			
			if (uoc.selected == true){
				if (inputcode.text.substr(0,1) != '*'){
					inputcode.text = '*' + inputcode.text
				}
			}
			if (gen.selected == true){
				if (inputcode.text.substr(0,1) == '*'){
					inputcode.text = inputcode.text.substr(1,inputcode.text.length);
				}
			}
			default_flag = new String();
			if (default_yes.selected == true){
				default_flag = 'Y'
			}
			if (default_no.selected == true){
				default_flag = 'N'
			}
			createRenditionXML(event);

		}
		
		private function createRenditionXML(event:Event):void {
			
			var rendition_head:String = '<rendition>'
			var rendition_tail:String = '</rendition>'
			var rendition_body:String = new String;
			var string_detail:String = new String;	
			var string_final:String = new String();	
			finalRenditionXML = new XML;
				
				
			// Select everything first to get indexing... 
			
			var arr:Array = new Array();
			for (var a:uint=dataGrid1.dataProvider.length -1 ;a>0;a--){	
				arr.push(a);
			}
			arr.push(0);
			
			arr = AscendingSortArray(arr);
			dataGrid2.selectedIndices = arr;
			
			for(var i:int = 0; i < dataGrid2.dataProvider.length; i++){
				var dg_type:String = dataGrid2.dataProvider[i].type;
				var dg_cn:String = dataGrid2.dataProvider[i].columnname;
				var dg_ht:String = dataGrid2.dataProvider[i].headertext;
				if ((dg_ht == null) || (dg_ht == 'null')|| (dg_ht == '')){
					dg_ht = '';
				}
				
				
				string_detail = string_detail + '<data>' +
														'<type>' + dg_type + '</type>' +
														'<columnname>' + dg_cn + '</columnname>' +
														'<headertext>' + dg_ht + '</headertext>' +
												'</data>'
			}
			
			finalRenditionXML = ('REFRESH,UPD_RENDITION,' + rendition_head +
				'<mbdcode>' + r_passed_mainboard + '</mbdcode>' +
				'<usercode>' + r_user_code + '</usercode>' +
				'<rendcode>' + inputcode.text + '</rendcode>' +
				'<renddesc>' + inputdescription.text + '</renddesc>' +
				'<default_rendition>' + default_flag + '</default_rendition>' +
				string_detail +
				rendition_tail);
			saverenditionbycreate.send();
		}
		private function datagrid2Drop(event:DragEvent):void{
			
				var dropTarget:DataGrid = DataGrid(event.currentTarget);  
				var dropLoc:int = dropTarget.calculateDropIndex(event); 
					if 	(dropLoc < r_lock_columns){
						AlertMessageShow('Dropping of items on Locked Columns are not allowed');
						event.preventDefault(); 
					}
					//UserRenditiontdObjectCollection.refresh();
		}

		 
		private var _callbackFunctionImplement:Function;
		  
		public function set callbackFunctionImplement( value:Function ):void {
			_callbackFunctionImplement = value;
		}
		
		
		private var _callbackFunctionImplementRetain:Function;
		
		public function set callbackFunctionImplementRetain( value:Function ):void {
			_callbackFunctionImplementRetain = value;
		}
		
		 
		
		private var _callbackFunction:Function;
		
		public function set callbackFunction( value:Function ):void {
			_callbackFunction = value;
		}
		
		protected function buttonClickedInpopup():void {
			_callbackFunction(null);
		}
		private function httpRequestUrlReditionCM(str_app:String):void{
			/*  I will just leave this for vl and ml for now.  I believe there will be another one coming for the mobileweb */
			if (str_app == 'ml'){
				
				
			
				retrieverendition.url = 'ae_tlch_ml_req.php'; 
				retrievemodifyrendition.url = 'ae_tlch_ml_req.php'; 
				saverenditionbycreate.url = 'ae_tlch_ml_req.php'; 
				saverenditionbycreateimplement.url = 'ae_tlch_ml_req.php'; 
				saverenditionbycreateimplementupdatequery.url = 'ae_tlch_ml_req.php'; 
				
				
			} else {
				
				
			
				retrieverendition.url = 'ae_tlch_xmlreq.php';
				retrievemodifyrendition.url = 'ae_tlch_xmlreq.php';
				saverenditionbycreate.url = 'ae_tlch_xmlreq.php';
				saverenditionbycreateimplement.url = 'ae_tlch_xmlreq.php';
				saverenditionbycreateimplementupdatequery.url = 'ae_tlch_xmlreq.php';
			}
			
		}
		
		private function resultStatusRenditionCM(string_result:String, string_reason:String):String{
			var retstr:String = new String;
			if (string_result == "EXPIRED"){
				retstr = "Session EXPIRED due to inactivity.  Please log out and log back in again to create a new session.";
			} 
			if (string_result == "FAIL"){
				retstr = string_reason;
			} 
			return retstr;
		}
		
		
		
		[Embed(source='image/Question_Mark_Orb_175.png')]
		
		private var confirmIcon:Class;
		
		private function alertListener(event:Event):void {
			var arr_column:Array = new Array;
			 var leftcount:int = 0;
			 var rightcount:int = 0;
			 
			 
			 
			for(var x:int = 0; x < ArrayColumnList.length; x++){
				
				arr_column = new Array;
					
				arr_column = ArrayColumnList[x]["column"].split(";");
				//Alert.show(ArrayColumnList[x]["column"]);
					
					//str_segment_array = ct.split(";");	
				 
				for(var y:int = 0; y < arr_column.length; y++){
					//Alert.show(arr_column[y]);
					var flag:Boolean = true; 
					leftcount = leftcount + 1
					for(var z:int = 0; z < UserRenditiontdObjectCollection.length; z++){
						if ((UserRenditiontdObjectCollection[z]["type"] == "locked column") || (UserRenditiontdObjectCollection[z]["type"] == "column")){
							//Alert.show(arr_column[y] + ":" + UserRenditiontdObjectCollection[z]["columnname"] );
							
							//Alert.show(arr_column[y].length.toString() + ":" + UserRenditiontdObjectCollection[z]["columnname"].length.toString() );
							
							   
							
							if (c_utils.trim(arr_column[y]) == c_utils.trim(UserRenditiontdObjectCollection[z]["columnname"])){
								//Alert.show("yawza: " + arr_column[y] + ":" + UserRenditiontdObjectCollection[z]["columnname"] );
								//flag = false;
								rightcount = rightcount + 1
								//break;
							} 
							
						//	Alert.show(flag.toString());
						} 
						
					}
					
					
					
					
					
					 
				}
				//if (flag == false){
				//	break;
				//}
				//Alert.show(flag.toString());
			}
			
			
			
			 if (leftcount == rightcount ){
				 
				 rr_return = "retain";
				 
				 
				 createRenditionXML_implement(event); 
				 
				 
			 } else {
				// Alert.show("Missing values");  
				  
			 
			
				 rr_return = "refresh";
			
			
			  
						
						
						
						
						Alert.okLabel = "OK";
						Alert.buttonWidth = 140;
						
						// instantiate the Alert box
						var a:Alert = Alert.show( 
							
							//"Are you sure? \n" +
							
							"Changes to the columns configuration will clear all existing settings, including all filters and sorts. Apply the change? \n" ,
							//"filters and sort. \n" ,
							/*
							"Leaving this page will cause you to lose any unsaved data (related tabs and windows should be closed first).\n"  +
							"Press Log-out or Cancel to stay on the current page.\n",
							*/
							"Confirmation",
							Alert.OK|Alert.CANCEL, 
							this, 
							confirmHandler,
							confirmIcon,         
							Alert.CANCEL  
							
							
							
						);   
						// modify the look of the Alert box
						a.setStyle("backgroundColor", '#C3D9FA');
						a.setStyle("borderColor", 0xffffff);
						a.setStyle("borderAlpha", 0.75);
						a.setStyle("fontSize", 14); 
						a.setStyle("fontWeight", "bold");
						a.setStyle("color", 0x000000); // text color
			 }		
		}
		
		private function confirmHandler(event:CloseEvent):void {    
			
			if (event.detail == Alert.OK) {
				// what to do if user selected "yes"
				createRenditionXML_implement(event); 
			} 
			/*
			else if (event.detail == Alert.NO) {
			// what to do if user selected "no"
			result.text = “No”;
			}
			*/
		}
		
		private function createRenditionXML_implement(event:Event):void {
			
			var rendition_head:String = '<rendition>'
			var rendition_tail:String = '</rendition>'
			var rendition_body:String = new String;
			var string_detail:String = new String;	
			var string_final:String = new String();	
			finalRenditionXML = new XML;
			
			
			// Select everything first to get indexing... 
			
			var arr:Array = new Array();
			for (var a:uint=dataGrid1.dataProvider.length -1 ;a>0;a--){	
				arr.push(a);
			}
			arr.push(0);
			
			arr = AscendingSortArray(arr);
			dataGrid2.selectedIndices = arr;
			
			for(var i:int = 0; i < dataGrid2.dataProvider.length; i++){
				var dg_type:String = dataGrid2.dataProvider[i].type;
				var dg_cn:String = dataGrid2.dataProvider[i].columnname;
				var dg_ht:String = dataGrid2.dataProvider[i].headertext;
				if ((dg_ht == null) || (dg_ht == 'null')|| (dg_ht == '')){
					dg_ht = '';
				}
				
				
				string_detail = string_detail + '<data>' +
					'<type>' + dg_type + '</type>' +
					'<columnname>' + dg_cn + '</columnname>' +
					'<headertext>' + dg_ht + '</headertext>' +
					'</data>'
			}
			
			finalRenditionXML = ('REFRESH,UPD_RENDITION,' + rendition_head +
				'<mbdcode>' + r_passed_mainboard + '</mbdcode>' +
				'<usercode>' + r_user_code + '</usercode>' +
				'<rendcode>' + "No Selection" + '</rendcode>' +
				'<renddesc>' + "Temporary File for Column" + '</renddesc>' +
				'<default_rendition>' + default_flag + '</default_rendition>' +
				string_detail +
				rendition_tail);
			//Alert.show(finalRenditionXML);
			saverenditionbycreateimplement.send();
		}
		
		
		

	]]> 
</mx:Script>
	<mx:ApplicationControlBar dock="true" width="100%">
	<!-- mx:Button label="e-Z Learn {parentApplication.mousehoverparslabel}"  id="btn_help" icon="@Embed('image/scholar_cap.png')"
						fontFamily="Arial" textAlign="center"  height="28"
						click="{launchEZLearnMenu(event)}" 
						rollOver="{parentApplication.mbdg_mousehovering(event,'',event.currentTarget.label,'BUTTON')}"
				 		rollOut="{ parentApplication.mbdg_stopHoverTimer()}"
					 	width="252"
					 	styleName="{'highResolutionLabel'}"    
					 	
					 / -->
	
		<mx:Button id="img_ezlearnswitch" icon="@Embed('image/scholar_cap_special.png')"            
				   height="27"
				   width="78"
				   useHandCursor="true" buttonMode="true"   
				   mouseChildren="false"
				   click="{parentApplication.scholarcap_mousehovering(event,'','Columns Editor','BUTTON')}"
				   
				   />   
		<mx:Spacer width="100%"/>
		<mx:Label id="lbl_titlerend" text="{r_passed_maintitle + ' Columns'}" fontSize="15" fontWeight="bold" useHandCursor="true" buttonMode="true"
			/>
        <mx:Spacer width="100%"/>
		<mx:Spacer width="78"/>
        <!-- mx:Button id="btn_close_window" icon="@Embed('image/icon_logoff.png')"
						fontFamily="Arial" textAlign="center" fontSize="12"
						
						
					/ -->		
    </mx:ApplicationControlBar>

<mx:HBox width="100%" height="100%">

    <mx:VBox width="100%" height="100%">
        <mx:Label text="All Columns/Panels"  fontSize="15" fontWeight="bold"/>
           <mx:Button id="btn_dg1_select_all" label="Select All" fontSize="15" click="{selectAlldg1(event)}"
           	rollOver="{parentApplication.mbdg_mousehovering(event,'',event.currentTarget.label,'BUTTON')}"
			rollOut="{ parentApplication.mbdg_stopHoverTimer()}"
           	/>
     
		<local:ActionGridADGRendition id="dataGrid1"
                width="100%"
                height="100%"
                rowHeight="22"
                dataProvider="{RenditiontdObjectCollection}"
                dragEnabled="true"
                verticalScrollPolicy="on"
                allowMultipleSelection="true"
                variableRowHeight="true"
				headerStyleName="centerAlignDataGridCol"
				horizontalGridLines="true"
            	verticalGridLines="true"
            	horizontalGridLineColor="black"
            	verticalGridLineColor="black" borderColor="#010101" borderThickness="1"
            	sortableColumns="false"
				dragStart="{datagrid1Click(event)}"
              >
            <local:columns>
                <mx:AdvancedDataGridColumn dataField="type" 
                        headerText="Panel/Column"  width="40" itemRenderer="NameLabel" >
				</mx:AdvancedDataGridColumn>
				<!-- mx:AdvancedDataGridColumn dataField="columnname"
				headerText="Column Name" / -->
                <mx:AdvancedDataGridColumn dataField="headertext"
                        headerText="Name" width="60" itemRenderer="NameLabel"/>
            </local:columns>
        </local:ActionGridADGRendition>
    
		

		
		<mx:Label text="{dataGrid1.dataProvider.length} items"  fontSize="15" fontWeight="bold"/>

		
    </mx:VBox>
 	<mx:VBox height="100%">
 		<mx:Spacer height="100%"/>	
 		<mx:Spacer width="20%"/>
 		<!-- mx:Button id="btn_transfer" label=">" height="41" fontSize="23" color="#3868A3"/ -->
 		<mx:Spacer height="100%"/>
 	</mx:VBox>  
    <mx:VBox width="100%" height="100%">
        <mx:Label text="Selected Columns/Panels"  fontSize="15" fontWeight="bold"/>
           <mx:HBox horizontalGap="0">
         	<mx:Button id="btn_dg2_remove" label="Remove" fontSize="15" click="{removeItem(event)}"
         			rollOver="{parentApplication.mbdg_mousehovering(event,'',event.currentTarget.label,'BUTTON')}"
					rollOut="{ parentApplication.mbdg_stopHoverTimer()}"/>
         	<mx:Button id="btn_dg2_addpanel" label="Add Panel" fontSize="15" click="{addPanelItem(event)}"
         			rollOver="{parentApplication.mbdg_mousehovering(event,'',event.currentTarget.label,'BUTTON')}"
					rollOut="{ parentApplication.mbdg_stopHoverTimer()}"/>
         	<mx:Button id="btn_dg2_clear" label="Clear All" fontSize="15" click="{clearall(event)}"
         				rollOver="{parentApplication.mbdg_mousehovering(event,'',event.currentTarget.label,'BUTTON')}"
						rollOut="{ parentApplication.mbdg_stopHoverTimer()}"/>
         	<mx:Button id="btn_dg2_saverendition" label="Save" fontSize="15"
					   		visible="false" width="0"
         					rollOver="{parentApplication.mbdg_mousehovering(event,'',event.currentTarget.label,'BUTTON')}"
							rollOut="{ parentApplication.mbdg_stopHoverTimer()}" click="{validateSaveRendition(event)}"/>
			  
		   </mx:HBox>
		
		
		
		<mx:DataGrid        id="dataGrid2"
									  width="100%"
									  height="100%"
									  rowHeight="22"
									  dataProvider="{UserRenditiontdObjectCollection}"
									  dragEnabled="true"
									  dragMoveEnabled="true"
									  dropEnabled="true"
									  verticalScrollPolicy="on"
									  allowMultipleSelection="true"
									  variableRowHeight="true"
									  headerStyleName="centerAlignDataGridCol"
									  horizontalGridLines="true"
									  verticalGridLines="true"
									  horizontalGridLineColor="black"   
									  verticalGridLineColor="black"  borderThickness="1"
									  sortableColumns="false"
									  dragStart="{datagrid2Click(event)}"
									  editable="false"
									  dragDrop="datagrid2Drop(event)"
									  
									  >
			<mx:columns>
				
				
				<mx:DataGridColumn  dataField="type" headerText="Panel/Column" width="40"  itemRenderer="NameLabel" >
				</mx:DataGridColumn>	
				<!-- mx:AdvancedDataGridColumn dataField="columnname"
				headerText="Column Name" / -->
				<mx:DataGridColumn dataField="headertext"
								   headerText="Name" width="60" itemRenderer="NameLabel" >
				</mx:DataGridColumn>
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox width="100%">
			
				 
			<mx:Label text="{dataGrid2.dataProvider.length} items"  fontSize="15" fontWeight="bold" />
			<mx:Spacer width="100%"/>
			<mx:Button id="btn_dg2_implement" label="Apply" fontSize="15"
					   rollOver="{parentApplication.mbdg_mousehovering(event,'',event.currentTarget.label,'BUTTON')}"
					   rollOut="{ parentApplication.mbdg_stopHoverTimer()}" click="{alertListener(event)}"/>

			<mx:Button id="btn_close_window" label="Cancel"
					   textAlign="center" fontSize="15"
					    
					   
					   />		
		</mx:HBox>		 
    </mx:VBox>
</mx:HBox>
</mx:TitleWindow>
